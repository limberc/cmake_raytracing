cmake_minimum_required(VERSION 3.14)

project(CMakeRT VERSION 1.0)

#===========================================================================

# 64 bit - sign bit = 63
# 15bit integer, 16bit fraction
set(FIX 16)
math(EXPR MAXf "(1<<${FIX})<<${FIX}")

function(Float _f _n)
  math(EXPR _ff "${_n}<<${FIX}")
  set(${_f} ${_ff} PARENT_SCOPE)
endfunction()

Float(f0 0)
Float(f1 1)
Float(f2 2)
Float(f3 3)
Float(f4 4)
Float(f8 8)
Float(f10 10)
Float(f99 99)
Float(f100 100)
Float(f255 255)
Float(fN1 -1)
Float(fN2 -2)
Float(fN3 -3)
Float(fN100 -100)

function(Float_Add _z _x _y)
  math(EXPR rst "${${_x}} + ${${_y}}")
  set(${_z} ${rst} PARENT_SCOPE)
endfunction()

function(Float_Minus _z _x _y)
  math(EXPR rst "${${_x}} - ${${_y}}")
  set(${_z} ${rst} PARENT_SCOPE)
endfunction()

function(Float_Mul _z _x _y)
  math(EXPR rst "(${${_x}} * ${${_y}})>>${FIX}")
  set(${_z} ${rst} PARENT_SCOPE)
endfunction()

function(Float_Div _z _x _y)
  math(EXPR rst "(${${_x}}<<${FIX}) / ${${_y}}")
  set(${_z} ${rst} PARENT_SCOPE)
endfunction()

function(Float_ToInt _i _f)
  math(EXPR _ff "${${_f}}>>${FIX}")
  set(${_i} ${_ff} PARENT_SCOPE)
endfunction()

# [0-1] f to 0 - 255
function(Float_ToColor _i _f)
  Float_Mul(x ${_f} f255)
  Float_ToInt(i x)
  set(${_i} ${i} PARENT_SCOPE)
endfunction()

function(Float_Sqrt _rst _f)
  # sqrt(_f) << 8
  set(x 65536)
  while(1)
    math(EXPR x "(${${_f}}/${x}+${x})/2")
    math(EXPR x2 "${x} * ${x}")
    math(EXPR xp2 "(${x}+1)*(${x}+1)")
    if(x2 LESS_EQUAL ${_f} AND ${_f} LESS_EQUAL xp2)
      break()
    endif()
  endwhile()
  math(EXPR x "${x}<<8")
  set(${_rst} ${x} PARENT_SCOPE)
endfunction()

function(Float_Print _f)
  math(EXPR fraction "((${${_f}} * 1000000)>>${FIX})%1000000")
  if(fraction LESS_EQUAL 0)
    math(EXPR fraction "-${fraction}")
  endif()
  Float_ToInt(fi ${_f}) # interger part
  string(LENGTH ix digits)
  message(STATUS "${_f} : ${fi}.${fraction}")
endfunction()

Float_Div(f0_5 f1 f2)
Float_Div(f0_8 f8 f10)
Float_Div(EPSILON f1 f100)

#===========================================================================

function(Vec3 _v _x _y _z)
  set(${_v} "${${_x}};${${_y}};${${_z}}" PARENT_SCOPE)
endfunction()

function(Vec3_Get _v _x _y _z)
  list(GET ${_v} 0 x)
  list(GET ${_v} 1 y)
  list(GET ${_v} 2 z)
  set(${_x} ${x} PARENT_SCOPE)
  set(${_y} ${y} PARENT_SCOPE)
  set(${_z} ${z} PARENT_SCOPE)
endfunction()

function(Vec3_Add _v2 _v0 _v1)
  Vec3_Get(${_v0} x0 y0 z0)
  Vec3_Get(${_v1} x1 y1 z1)
  Float_Add(tx2 x0 x1)
  Float_Add(ty2 y0 y1)
  Float_Add(tz2 z0 z1)
  set(${_v2} "${tx2};${ty2};${tz2}" PARENT_SCOPE)
endfunction()

function(Vec3_Minus _v2 _v0 _v1)
  Vec3_Get(${_v0} x0 y0 z0)
  Vec3_Get(${_v1} x1 y1 z1)
  Float_Minus(tx2 x0 x1)
  Float_Minus(ty2 y0 y1)
  Float_Minus(tz2 z0 z1)
  set(${_v2} "${tx2};${ty2};${tz2}" PARENT_SCOPE)
endfunction()

function(Vec3_Mul _v2 _v0 _v1)
  Vec3_Get(${_v0} x0 y0 z0)
  Vec3_Get(${_v1} x1 y1 z1)
  Float_Mul(tx2 x0 x1)
  Float_Mul(ty2 y0 y1)
  Float_Mul(tz2 z0 z1)
  set(${_v2} "${tx2};${ty2};${tz2}" PARENT_SCOPE)
endfunction()

function(Vec3_SMul _u _v _k)
  Vec3_Get(${_v} x y z)
  Float_Mul(tx x ${_k})
  Float_Mul(ty y ${_k})
  Float_Mul(tz z ${_k})
  set(${_u} "${tx};${ty};${tz}" PARENT_SCOPE)
endfunction()

function(Vec3_SDiv _u _v _k)
  Vec3_Get(${_v} x y z)
  Float_Div(tx x ${_k})
  Float_Div(ty y ${_k})
  Float_Div(tz z ${_k})
  set(${_u} "${tx};${ty};${tz}" PARENT_SCOPE)
endfunction()

function(Vec3_Div _v2 _v0 _v1)
  Vec3_Get(${_v0} x0 y0 z0)
  Vec3_Get(${_v1} x1 y1 z1)
  Float_Div(tx2 x0 x1)
  Float_Div(ty2 y0 y1)
  Float_Div(tz2 z0 z1)
  set(${_v2} "${tx2};${ty2};${tz2}" PARENT_SCOPE)
endfunction()

function(Vec3_Dot _rst _v0 _v1)
  Vec3_Get(${_v0} x0 y0 z0)
  Vec3_Get(${_v1} x1 y1 z1)
  Float_Mul(x2 x0 x1)
  Float_Mul(y2 y0 y1)
  Float_Mul(z2 z0 z1)
  math(EXPR rst "${x2} + ${y2} + ${z2}")
  set(${_rst} ${rst} PARENT_SCOPE)
endfunction()

function(Vec3_Norm _rst _v)
  Vec3_Dot(rst2 ${_v} ${_v})
  Float_Sqrt(rst rst2)
  set(${_rst} ${rst} PARENT_SCOPE)
endfunction()

function(Vec3_Normalize _nV _v)
  Vec3_Norm(norm ${_v})
  Vec3_SDiv(nV ${_v} norm)
  set(${_nV} ${nV} PARENT_SCOPE)
endfunction()

function(Vec3_Print _v)
  Vec3_Get(${_v} x y z)
  message(STATUS "${_v}: [")
  Float_Print(x)
  Float_Print(y)
  Float_Print(z)
  message(STATUS "]")
endfunction()

function(Vec3_Reflect _out _in _normal)
  Vec3_Dot(x ${_in} ${_normal})
  Float_Mul(two_x x f2)
  Vec3_SMul(dif ${_normal} two_x)
  Vec3_Minus(rst ${_in} dif)
  set(${_out} ${rst} PARENT_SCOPE)
endfunction()

#===========================================================================

function(Ray _ray _origin _dir _t)
  set(${_ray} "${${_origin}};${${_dir}};${${_t}}" PARENT_SCOPE)
endfunction()

function(Ray_Get _ray _origin _dir _t)
  list(GET ${_ray} 0 1 2 _o)
  list(GET ${_ray} 3 4 5 _d)
  list(GET ${_ray} 6 _tt)
  set(${_origin} ${_o} PARENT_SCOPE)
  set(${_dir} ${_d} PARENT_SCOPE)
  set(${_t} ${_tt} PARENT_SCOPE)
endfunction()

function(Ray_At _pos _ray _t)
  Ray_Get(${_ray} origin dir _)
  Vec3_SMul(tdir dir ${_t})
  Vec3_Add(rst origin tdir)
  set(${_pos} ${rst} PARENT_SCOPE)
endfunction()

function(Ray_Print _ray)
  Ray_Get(${_ray} origin dir tmax)
  message(STATUS "${_ray} : [")
  Vec3_Print(origin)
  Vec3_Print(dir)
  Float_Print(tmax)
  message(STATUS "]")
endfunction()

#===========================================================================

function(Sphere _sphere _center _radius)
  set(${_sphere} "${${_center}};${${_radius}}" PARENT_SCOPE)
endfunction()

function(Sphere_Get _sphere _center _radius)
  list(GET ${_sphere} 0 1 2 center)
  list(GET ${_sphere} 3 radius)
  set(${_center} ${center} PARENT_SCOPE)
  set(${_radius} ${radius} PARENT_SCOPE)
endfunction()

#===========================================================================

# camera arguments
set(width 200)
set(height 100)
Float(widthf ${width})
Float(heightf ${height})

Vec3(ORIGIN f0 f0 fN2)
Vec3(LBCorner fN2 fN1 fN1)
Vec3(RIGHT f4 f0 f0)
Vec3(UP f0 f2 f0)

function(GenRay _ray _i _j)
  Float(fi ${${_i}})
  Float(fj ${${_j}})
  Float_Minus(fj heightf fj)
  Float_Div(fu fi widthf)
  Float_Div(fv fj heightf)
  Vec3_SMul(Right RIGHT fu)
  Vec3_SMul(Up UP fv)
  Vec3_Add(LBCornerR LBCorner Right)
  Vec3_Add(LBCornerRU LBCornerR Up)
  Vec3_Minus(dir LBCornerRU ORIGIN)
  Vec3_Normalize(dir dir)
  Ray(rst ORIGIN dir MAXf)
  set(${_ray} ${rst} PARENT_SCOPE)
endfunction()

function(Intersect_Sphere _hit _t _ray _sphere)
  Ray_Get(${_ray} o d tmax)
  Sphere_Get(${_sphere} c R)
  Vec3_Dot(A d d)
  Vec3_Minus(oc o c)
  Vec3_Dot(B oc d)
  Vec3_Dot(oc2 oc oc)
  Float_Mul(R2 R R)
  Float_Minus(C oc2 R2)
  Float_Mul(B2 B B)
  Float_Mul(AC A C)
  Float_Minus(discriminant B2 AC)
  if(discriminant LESS_EQUAL 0)
    set(${_hit} 0 PARENT_SCOPE)
    return()
  endif()
  Float_Sqrt(sqrt_discriminant discriminant)
  Float_Div(inv_A f1 A)
  Float_Minus(NegB f0 B)
  Float_Minus(tmp NegB sqrt_discriminant)
  Float_Mul(t tmp inv_A)
  if(t LESS_EQUAL EPSILON OR tmax LESS_EQUAL t)
    Float_Add(tmp NegB sqrt_discriminant)
    Float_Mul(t tmp inv_A)
    if(t LESS_EQUAL EPSILON OR tmax LESS_EQUAL t)
      set(${_hit} 0 PARENT_SCOPE)
      return()
    endif()
  endif()
  set(${_hit} 1 PARENT_SCOPE)
  set(${_t} ${t} PARENT_SCOPE)
endfunction()

#===========================================================================

# scene
Vec3(s0c f0 f0 f2)
Vec3(s1c f0 fN100 f2)
Sphere(s0 s0c f1)
Sphere(s1 s1c f99)
Vec3(reflectance f0_5 f0_5 f0_5)
Vec3(WHITE f1 f1 f1)
Vec3(BLUE f0_5 f0_8 f1)

function(Env _radiance _ray)
  Ray_Get(${_ray} o d _)
  Vec3_Normalize(nD d)
  Vec3_Get(nD x y z)
  Float_Add(tmp y f1)
  Float_Mul(t tmp f0_5)
  Float_Minus(one_minus_t f1 t)
  Vec3_SMul(tWhite WHITE t)
  Vec3_SMul(tBlue BLUE one_minus_t)
  Vec3_Add(rst tWhite tBlue)
  set(${_radiance} ${rst} PARENT_SCOPE)
endfunction()

function(Trace _radiance _ray _depth)
  if(${_depth} LESS_EQUAL 0)
    set(${_radiance} "0;0;0" PARENT_SCOPE)
    return()
  endif()
  math(EXPR nextDepth "${${_depth}} - 1")
  
  Ray_Get(${_ray} origin dir _)
  
  Intersect_Sphere(hit0 t ${_ray} s0)
  set(hit 0)
  if(${hit0})
    set(hit 1)
    Ray_At(pos ${_ray} t)
    Vec3_Minus(normal pos s0c)
    Vec3_Normalize(normal normal)
    Vec3_Reflect(out dir normal) # out : new ray dir
    Ray(tmpRay origin dir t)
    set(${_ray} ${tmpRay}) # update t
  endif()
  Intersect_Sphere(hit1 t ${_ray} s1)
  if(${hit1})
    set(hit 1)
    Ray_At(pos ${_ray} t)
    Vec3_Minus(normal pos s1c)
    Vec3_Normalize(normal normal)
    Vec3_Reflect(out dir normal) # out : new ray dir
    #Ray(_ray origin dir t) # update t
  endif()
  
  if(${hit})
    Ray(newRay pos out MAXf)
    Trace(color newRay nextDepth)
    Vec3_Mul(rst reflectance color)
  else()
    Env(rst ${_ray})
  endif()
  
  set(${_radiance} ${rst} PARENT_SCOPE)
endfunction()

#===========================================================================


set(PPM "P3
${width} ${height}
255
")

set(MaxDepth 5)
set(i 1)
set(j 1)
while(j LESS_EQUAL height)
  while(i LESS_EQUAL width)
    GenRay(ray i j)
    Trace(rst ray MaxDepth)
    Vec3_Get(rst r g b)
    Float_Sqrt(sqrt_r r)
    Float_Sqrt(sqrt_g g)
    Float_Sqrt(sqrt_b b)
    Float_ToColor(red sqrt_r)
    Float_ToColor(green sqrt_g)
    Float_ToColor(blue sqrt_b)
    string(APPEND PPM "${red} ${green} ${blue}\n")
    math(EXPR i "${i} + 1")
  endwhile()
  math(EXPR j "${j} + 1")
  set(i 1)
endwhile()


file(WRITE "out.ppm" ${PPM})